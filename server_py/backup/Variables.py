# -*- coding: utf-8 -*-
from utils import *
from coeffs import *
import numpy as np

DENSITY = 3000


manager = {
    'address': '강원 홍천군 화촌면',
    'availableSpc': ['물오리나무', '소나무', '신나무', '산벚나무', '잣나무', '신갈나무', '산뽕나무', '층층나무', '피나무', '느릅나무', '물푸레나무', '일본잎갈나무',
                     '자작나무'],
    'additionalSpc': ['굴참나무', '리기다소나무', '졸참나무', '곰솔', '상수리나무', '밤나무', '아까시나무', '갈참나무', '때죽나무', '굴피나무', '떡갈나무'],
    'totalSpc': ['물오리나무', '소나무', '신나무', '산벚나무', '잣나무', '신갈나무', '산뽕나무', '층층나무', '피나무', '느릅나무', '물푸레나무', '일본잎갈나무', '자작나무',
                 '굴참나무', '리기다소나무', '졸참나무', '곰솔', '상수리나무', '밤나무', '아까시나무', '갈참나무', '때죽나무', '굴피나무', '떡갈나무'],
    'numSections': 5,
    'numSpecies': 6,
    'planningPeriod': 15,
    'startYear': 2011,
    'spcClasses': [{
        'class': 1,
        'speciesID': 'O',
        'species': '소나무'
    }, {
        'class': 2,
        'speciesID': 'C',
        'species': '리기다소나무'
    }, {
        'class': 3,
        'speciesID': 'K',
        'species': '잣나무'
    }, {
        'class': 4,
        'speciesID': 'L',
        'species': '일본잎갈나무'
    }, {
        'class': 5,
        'speciesID': 'S',
        'species': '상수리나무'
    }, {
        'class': 6,
        'speciesID': 'B',
        'species': '신갈나무'
    }],
    'spcLists': ['소나무', '리기다소나무', '잣나무', '일본잎갈나무', '상수리나무', '신갈나무'],
    'currentSpc': [{
        'section': 1,
        'species': '잣나무',
        'age': 8,
        'area': 208.7,
        'volume': 394.7714
    }, {
        'section': 1,
        'species': '일본잎갈나무',
        'age': 8,
        'area': 5,
        'volume': 272.264
    }, {
        'section': 1,
        'species': '잣나무',
        'age': 7,
        'area': 2,
        'volume': 185.77
    }, {
        'section': 1,
        'species': '잣나무',
        'age': 6,
        'area': 13,
        'volume': 167.12
    }, {
        'section': 1,
        'species': '일본잎갈나무',
        'age': 6,
        'area': 1,
        'volume': 238.46
    }, {
        'section': 1,
        'species': '잣나무',
        'age': 5,
        'area': 200.1,
        'volume': 280.2216
    }, {
        'section': 1,
        'species': '일본잎갈나무',
        'age': 5,
        'area': 7,
        'volume': 373.03
    }, {
        'section': 1,
        'species': '신갈나무',
        'age': 5,
        'area': 31,
        'volume': 208.6839
    }, {
        'section': 1,
        'species': '잣나무',
        'age': 4,
        'area': 368,
        'volume': 276.128
    }, {
        'section': 1,
        'species': '일본잎갈나무',
        'age': 4,
        'area': 41,
        'volume': 339.6974
    }, {
        'section': 1,
        'species': '신갈나무',
        'age': 4,
        'area': 9,
        'volume': 204.21
    }, {
        'section': 1,
        'species': '잣나무',
        'age': 3,
        'area': 35,
        'volume': 202.397
    }, {
        'section': 1,
        'species': '일본잎갈나무',
        'age': 3,
        'area': 14,
        'volume': 119.9014
    }, {
        'section': 1,
        'species': '신갈나무',
        'age': 3,
        'area': 7,
        'volume': 142.37
    }, {
        'section': 1,
        'species': '소나무',
        'age': 2,
        'area': 3,
        'volume': 0.001
    }, {
        'section': 1,
        'species': '잣나무',
        'age': 2,
        'area': 13,
        'volume': 29.3833
    }, {
        'section': 1,
        'species': '상수리나무',
        'age': 2,
        'area': 2,
        'volume': 0.001
    }, {
        'section': 1,
        'species': '소나무',
        'age': 1,
        'area': 35,
        'volume': 115.22
    }, {
        'section': 1,
        'species': '잣나무',
        'age': 1,
        'area': 1,
        'volume': 0.001
    }, {
        'section': 1,
        'species': '상수리나무',
        'age': 1,
        'area': 12,
        'volume': 0.001
    }, {
        'section': 1,
        'species': '신갈나무',
        'age': 1,
        'area': 21,
        'volume': 5.1048
    }, {
        'section': 2,
        'species': '잣나무',
        'age': 5,
        'area': 33,
        'volume': 160.7384
    }, {
        'section': 2,
        'species': '일본잎갈나무',
        'age': 5,
        'area': 37,
        'volume': 358.0718919
    }, {
        'section': 2,
        'species': '신갈나무',
        'age': 5,
        'area': 32.5,
        'volume': 194.13
    }, {
        'section': 2,
        'species': '소나무',
        'age': 4,
        'area': 3,
        'volume': 172.44
    }, {
        'section': 2,
        'species': '리기다소나무',
        'age': 4,
        'area': 9,
        'volume': 118.66
    }, {
        'section': 2,
        'species': '잣나무',
        'age': 4,
        'area': 34,
        'volume': 267.2690647
    }, {
        'section': 2,
        'species': '일본잎갈나무',
        'age': 4,
        'area': 11,
        'volume': 172.16
    }, {
        'section': 2,
        'species': '신갈나무',
        'age': 4,
        'area': 5,
        'volume': 93.73
    }, {
        'section': 2,
        'species': '신갈나무',
        'age': 3,
        'area': 20,
        'volume': 90.666
    }, {
        'section': 2,
        'species': '잣나무',
        'age': 2,
        'area': 36,
        'volume': 54.74
    }, {
        'section': 2,
        'species': '일본잎갈나무',
        'age': 2,
        'area': 6,
        'volume': 18.82
    }, {
        'section': 2,
        'species': '잣나무',
        'age': 1,
        'area': 2,
        'volume': 0.001
    }, {
        'section': 2,
        'species': '일본잎갈나무',
        'age': 1,
        'area': 2,
        'volume': 0.001
    }, {
        'section': 3,
        'species': '잣나무',
        'age': 8,
        'area': 14,
        'volume': 179.2786
    }, {
        'section': 3,
        'species': '일본잎갈나무',
        'age': 7,
        'area': 2,
        'volume': 279.85
    }, {
        'section': 3,
        'species': '소나무',
        'age': 6,
        'area': 2,
        'volume': 115.65
    }, {
        'section': 3,
        'species': '일본잎갈나무',
        'age': 6,
        'area': 4,
        'volume': 178.88
    }, {
        'section': 3,
        'species': '신갈나무',
        'age': 6,
        'area': 61.9,
        'volume': 117.2601454
    }, {
        'section': 3,
        'species': '리기다소나무',
        'age': 5,
        'area': 13,
        'volume': 279.643
    }, {
        'section': 3,
        'species': '잣나무',
        'age': 5,
        'area': 137.8,
        'volume': 318.417237
    }, {
        'section': 3,
        'species': '일본잎갈나무',
        'age': 5,
        'area': 160.3,
        'volume': 374.632258
    }, {
        'section': 3,
        'species': '신갈나무',
        'age': 5,
        'area': 182.4,
        'volume': 207.9909371
    }, {
        'section': 3,
        'species': '리기다소나무',
        'age': 4,
        'area': 71,
        'volume': 261.4693
    }, {
        'section': 3,
        'species': '잣나무',
        'age': 4,
        'area': 364,
        'volume': 266.1554439
    }, {
        'section': 3,
        'species': '일본잎갈나무',
        'age': 4,
        'area': 193,
        'volume': 327.1993325
    }, {
        'section': 3,
        'species': '신갈나무',
        'age': 4,
        'area': 116,
        'volume': 192.5432645
    }, {
        'section': 3,
        'species': '소나무',
        'age': 3,
        'area': 1,
        'volume': 53.87
    }, {
        'section': 3,
        'species': '잣나무',
        'age': 3,
        'area': 77,
        'volume': 172.49097
    }, {
        'section': 3,
        'species': '일본잎갈나무',
        'age': 3,
        'area': 22,
        'volume': 215.0725
    }, {
        'section': 3,
        'species': '상수리나무',
        'age': 3,
        'area': 5,
        'volume': 64.77
    }, {
        'section': 3,
        'species': '신갈나무',
        'age': 3,
        'area': 8,
        'volume': 77.8925
    }, {
        'section': 3,
        'species': '잣나무',
        'age': 2,
        'area': 16,
        'volume': 52.44365222
    }, {
        'section': 3,
        'species': '일본잎갈나무',
        'age': 2,
        'area': 48,
        'volume': 53.05604167
    }, {
        'section': 3,
        'species': '상수리나무',
        'age': 2,
        'area': 2,
        'volume': 31.55
    }, {
        'section': 3,
        'species': '신갈나무',
        'age': 2,
        'area': 5,
        'volume': 23.716
    }, {
        'section': 3,
        'species': '소나무',
        'age': 1,
        'area': 6,
        'volume': 0.001
    }, {
        'section': 3,
        'species': '잣나무',
        'age': 1,
        'area': 15.1,
        'volume': 0.001
    }, {
        'section': 3,
        'species': '일본잎갈나무',
        'age': 1,
        'area': 10,
        'volume': 0.001
    }, {
        'section': 3,
        'species': '상수리나무',
        'age': 1,
        'area': 4,
        'volume': 0.001
    }, {
        'section': 4,
        'species': '잣나무',
        'age': 8,
        'area': 34,
        'volume': 204.4741176
    }, {
        'section': 4,
        'species': '잣나무',
        'age': 7,
        'area': 4,
        'volume': 183.91
    }, {
        'section': 4,
        'species': '일본잎갈나무',
        'age': 7,
        'area': 3,
        'volume': 279.85
    }, {
        'section': 4,
        'species': '소나무',
        'age': 5,
        'area': 13,
        'volume': 119.5492308
    }, {
        'section': 4,
        'species': '잣나무',
        'age': 5,
        'area': 50,
        'volume': 305.6047429
    }, {
        'section': 4,
        'species': '일본잎갈나무',
        'age': 5,
        'area': 26,
        'volume': 188.7784615
    }, {
        'section': 4,
        'species': '신갈나무',
        'age': 5,
        'area': 231.3,
        'volume': 252.3812077
    }, {
        'section': 4,
        'species': '리기다소나무',
        'age': 4,
        'area': 15,
        'volume': 317.1681818
    }, {
        'section': 4,
        'species': '잣나무',
        'age': 4,
        'area': 300,
        'volume': 300.5181462
    }, {
        'section': 4,
        'species': '일본잎갈나무',
        'age': 4,
        'area': 296,
        'volume': 350.543884
    }, {
        'section': 4,
        'species': '상수리나무',
        'age': 4,
        'area': 7,
        'volume': 133.24
    }, {
        'section': 4,
        'species': '잣나무',
        'age': 3,
        'area': 9,
        'volume': 183.738
    }, {
        'section': 4,
        'species': '일본잎갈나무',
        'age': 3,
        'area': 32,
        'volume': 126.193125
    }, {
        'section': 4,
        'species': '잣나무',
        'age': 2,
        'area': 10,
        'volume': 77.51833333
    }, {
        'section': 4,
        'species': '일본잎갈나무',
        'age': 2,
        'area': 23,
        'volume': 119.4336364
    }, {
        'section': 4,
        'species': '소나무',
        'age': 1,
        'area': 3,
        'volume': 0.001
    }, {
        'section': 4,
        'species': '일본잎갈나무',
        'age': 1,
        'area': 2,
        'volume': 0.001
    }, {
        'section': 4,
        'species': '상수리나무',
        'age': 1,
        'area': 4,
        'volume': 11.73
    }, {
        'section': 5,
        'species': '소나무',
        'age': 4,
        'area': 4,
        'volume': 93.73
    }, {
        'section': 5,
        'species': '잣나무',
        'age': 4,
        'area': 122,
        'volume': 265.3024912
    }, {
        'section': 5,
        'species': '일본잎갈나무',
        'age': 4,
        'area': 134,
        'volume': 314.8127545
    }, {
        'section': 5,
        'species': '신갈나무',
        'age': 4,
        'area': 130,
        'volume': 140.7911905
    }, {
        'section': 5,
        'species': '잣나무',
        'age': 3,
        'area': 11,
        'volume': 116.0973
    }, {
        'section': 5,
        'species': '일본잎갈나무',
        'age': 3,
        'area': 18,
        'volume': 258.7087286
    }, {
        'section': 5,
        'species': '소나무',
        'age': 2,
        'area': 10,
        'volume': 12.54
    }, {
        'section': 5,
        'species': '잣나무',
        'age': 2,
        'area': 27,
        'volume': 3.92
    }, {
        'section': 5,
        'species': '일본잎갈나무',
        'age': 2,
        'area': 14,
        'volume': 12.97714286
    }, {
        'section': 5,
        'species': '상수리나무',
        'age': 2,
        'area': 24,
        'volume': 51.69454545
    }, {
        'section': 5,
        'species': '신갈나무',
        'age': 2,
        'area': 3,
        'volume': 10
    }, {
        'section': 5,
        'species': '소나무',
        'age': 1,
        'area': 27,
        'volume': 0.001
    }, {
        'section': 5,
        'species': '잣나무',
        'age': 1,
        'area': 21.3,
        'volume': 0.001
    }, {
        'section': 5,
        'species': '일본잎갈나무',
        'age': 1,
        'area': 9,
        'volume': 0.001
    }, {
        'section': 5,
        'species': '상수리나무',
        'age': 1,
        'area': 2,
        'volume': 0.001
    }, {
        'section': 5,
        'species': '신갈나무',
        'age': 1,
        'area': 28,
        'volume': 7.932142857
    }],
    'thinningScenario': [],
    'forManPlan': [{
        'section': 1,
        'species': '소나무',
        'clearCutYear': 7,
        'thinningScenario': [0, 0.3, 0, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    }, {
        'section': 1,
        'species': '리기다소나무',
        'clearCutYear': 4,
        'thinningScenario': [0, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    }, {
        'section': 1,
        'species': '잣나무',
        'clearCutYear': 7,
        'thinningScenario': [0, 0.3, 0, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    }, {
        'section': 1,
        'species': '일본잎갈나무',
        'clearCutYear': 6,
        'thinningScenario': [0, 0.3, 0, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    }, {
        'section': 1,
        'species': '상수리나무',
        'clearCutYear': 7,
        'thinningScenario': [0, 0.3, 0, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    }, {
        'section': 1,
        'species': '신갈나무',
        'clearCutYear': 7,
        'thinningScenario': [0, 0.3, 0, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    }, {
        'section': 2,
        'species': '소나무',
        'clearCutYear': 6,
        'thinningScenario': [0, 0.3, 0.3, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    }, {
        'section': 2,
        'species': '리기다소나무',
        'clearCutYear': 3,
        'thinningScenario': [0, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    }, {
        'section': 2,
        'species': '잣나무',
        'clearCutYear': 6,
        'thinningScenario': [0, 0.3, 0.3, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    }, {
        'section': 2,
        'species': '일본잎갈나무',
        'clearCutYear': 5,
        'thinningScenario': [0, 0.3, 0.3, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    }, {
        'section': 2,
        'species': '상수리나무',
        'clearCutYear': 6,
        'thinningScenario': [0, 0.3, 0.3, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    }, {
        'section': 2,
        'species': '신갈나무',
        'clearCutYear': 6,
        'thinningScenario': [0, 0.3, 0.3, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    }, {
        'section': 3,
        'species': '소나무',
        'clearCutYear': 6,
        'thinningScenario': [0, 0.3, 0, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    }, {
        'section': 3,
        'species': '리기다소나무',
        'clearCutYear': 3
    }, {
        'section': 3,
        'species': '잣나무',
        'clearCutYear': 6,
        'thinningScenario': [0, 0.3, 0, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    }, {
        'section': 3,
        'species': '일본잎갈나무',
        'clearCutYear': 5,
        'thinningScenario': [0, 0.3, 0, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    }, {
        'section': 3,
        'species': '상수리나무',
        'clearCutYear': 6,
        'thinningScenario': [0, 0.3, 0, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    }, {
        'section': 3,
        'species': '신갈나무',
        'clearCutYear': 6,
        'thinningScenario': [0, 0.3, 0, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    }, {
        'section': 4,
        'species': '소나무',
        'clearCutYear': 6,
        'thinningScenario': [0, 0.3, 0, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    }, {
        'section': 4,
        'species': '리기다소나무',
        'clearCutYear': 3
    }, {
        'section': 4,
        'species': '잣나무',
        'clearCutYear': 6,
        'thinningScenario': [0, 0.3, 0, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    }, {
        'section': 4,
        'species': '일본잎갈나무',
        'clearCutYear': 5,
        'thinningScenario': [0, 0.3, 0, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    }, {
        'section': 4,
        'species': '상수리나무',
        'clearCutYear': 6,
        'thinningScenario': [0, 0.3, 0, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    }, {
        'section': 4,
        'species': '신갈나무',
        'clearCutYear': 6,
        'thinningScenario': [0, 0.3, 0, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    }, {
        'section': 5,
        'species': '소나무',
        'clearCutYear': 6,
        'thinningScenario': [0, 0.3, 0, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    }, {
        'section': 5,
        'species': '리기다소나무',
        'clearCutYear': 3
    }, {
        'section': 5,
        'species': '잣나무',
        'clearCutYear': 6,
        'thinningScenario': [0, 0.3, 0, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    }, {
        'section': 5,
        'species': '일본잎갈나무',
        'clearCutYear': 5,
        'thinningScenario': [0, 0.3, 0, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    }, {
        'section': 5,
        'species': '상수리나무',
        'clearCutYear': 6,
        'thinningScenario': [0, 0.3, 0, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    }, {
        'section': 5,
        'species': '신갈나무',
        'clearCutYear': 6,
        'thinningScenario': [0, 0.3, 0, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    }],
    'spcGrowth': {
        '소나무': {
            'points': [[1, -0.03872], [2, -0.003478], [3, 0.017137], [4, 0.031763], [5, 0.043109], [6, 0.052378],
                       [7, 0.060216], [8, 0.067005], [9, 0.072993], [10, 0.07835], [11, 0.083196], [12, 0.08762],
                       [13, 0.09169], [14, 0.095458], [15, 0.098965], [16, 0.102247], [17, 0.105329], [18, 0.108235],
                       [19, 0.110984], [20, 0.113592], [21, 0.116073], [22, 0.118438], [23, 0.120698], [24, 0.122862],
                       [25, 0.124937], [26, 0.126931], [27, 0.12885], [28, 0.130699], [29, 0.132483], [30, 0.134207],
                       [31, 0.135874], [32, 0.137488]],
            'equation': [-0.03872, 0.050843],
            'string': 'y = -0.03872 + 0.050843 ln(x)',
            'r2': 0.791039,
            'predictions': [0, 0, 0.017137, 0.031763, 0.043109, 0.052378, 0.060216, 0.067005, 0.072993, 0.07835,
                            0.083196, 0.08762, 0.09169, 0.095458, 0.098965, 0.102247, 0.105329, 0.108235, 0.110984,
                            0.113592, 0.116073, 0.118438, 0.120698, 0.122862, 0.124937, 0.126931, 0.12885, 0.130699,
                            0.132483, 0.134207, 0.135874, 0.137488, 0.139053, 0.140571, 0.142045, 0.143477, 0.14487,
                            0.146226, 0.147546, 0.148834, 0.150089, 0.151314, 0.152511, 0.15368, 0.154822, 0.15594,
                            0.157033, 0.158103, 0.159152, 0.160179, 0.161186, 0.162173, 0.163142, 0.164092, 0.165025,
                            0.165941, 0.166841, 0.167725, 0.168594, 0.169449, 0.170289, 0.171116, 0.171929, 0.17273,
                            0.173518, 0.174295, 0.175059, 0.175812, 0.176555, 0.177286, 0.178007, 0.178719, 0.17942,
                            0.180112, 0.180794, 0.181467, 0.182132, 0.182788, 0.183436, 0.184075, 0.184707, 0.185331,
                            0.185947, 0.186556, 0.187158, 0.187752, 0.18834, 0.188921, 0.189496, 0.190064, 0.190626,
                            0.191181, 0.191731, 0.192275, 0.192813, 0.193345, 0.193872, 0.194394, 0.19491, 0.195421,
                            0.195927, 0.196427, 0.196924, 0.197415, 0.197901, 0.198383, 0.198861, 0.199334, 0.199802,
                            0.200267, 0.200727, 0.201183, 0.201635, 0.202083, 0.202527, 0.202967, 0.203403, 0.203836,
                            0.204265, 0.20469, 0.205112, 0.205531, 0.205946, 0.206358, 0.206766, 0.207171, 0.207573,
                            0.207972, 0.208367, 0.20876, 0.20915, 0.209536, 0.20992, 0.210301, 0.210679, 0.211054,
                            0.211427, 0.211796, 0.212163, 0.212528, 0.21289, 0.213249, 0.213606, 0.21396, 0.214312,
                            0.214662, 0.215009, 0.215353, 0.215696, 0.216036],
            'growthCombined': [0, 0.0205, 0.0322, 0.0415, 0.0485, 0.0432, 0.0425, 0.0444, 0.047, 0.0526, 0.0594, 0.064,
                               0.0705, 0.0752, 0.0817, 0.086, 0.089, 0.0939, 0.0992, 0.1049, 0.1115, 0.1177, 0.1234,
                               0.11, 0.1148, 0.1333, 0.1443, 0.1586, 0.1681, 0.173, 0.1779, 0.1788, 0.140571, 0.142045,
                               0.143477, 0.14487, 0.146226, 0.147546, 0.148834, 0.150089, 0.151314, 0.152511, 0.15368,
                               0.154822, 0.15594, 0.157033, 0.158103, 0.159152, 0.160179, 0.161186, 0.162173, 0.163142,
                               0.164092, 0.165025, 0.165941, 0.166841, 0.167725, 0.168594, 0.169449, 0.170289, 0.171116,
                               0.171929, 0.17273, 0.173518, 0.174295, 0.175059, 0.175812, 0.176555, 0.177286, 0.178007,
                               0.178719, 0.17942, 0.180112, 0.180794, 0.181467, 0.182132, 0.182788, 0.183436, 0.184075,
                               0.184707, 0.185331, 0.185947, 0.186556, 0.187158, 0.187752, 0.18834, 0.188921, 0.189496,
                               0.190064, 0.190626, 0.191181, 0.191731, 0.192275, 0.192813, 0.193345, 0.193872, 0.194394,
                               0.19491, 0.195421, 0.195927, 0.196427, 0.196924, 0.197415, 0.197901, 0.198383, 0.198861,
                               0.199334, 0.199802, 0.200267, 0.200727, 0.201183, 0.201635, 0.202083, 0.202527, 0.202967,
                               0.203403, 0.203836, 0.204265, 0.20469, 0.205112, 0.205531, 0.205946, 0.206358, 0.206766,
                               0.207171, 0.207573, 0.207972, 0.208367, 0.20876, 0.20915, 0.209536, 0.20992, 0.210301,
                               0.210679, 0.211054, 0.211427, 0.211796, 0.212163, 0.212528, 0.21289, 0.213249, 0.213606,
                               0.21396, 0.214312, 0.214662, 0.215009, 0.215353, 0.215696, 0.216036, None]
        },
        '리기다소나무': {
            'points': [[1, -0.019395], [2, -0.006895], [3, 0.000416], [4, 0.005604], [5, 0.009628], [6, 0.012916],
                       [7, 0.015696], [8, 0.018104], [9, 0.020228], [10, 0.022128], [11, 0.023846], [12, 0.025415],
                       [13, 0.026859], [14, 0.028195], [15, 0.029439], [16, 0.030603], [17, 0.031696], [18, 0.032727],
                       [19, 0.033702], [20, 0.034627], [21, 0.035507], [22, 0.036346], [23, 0.037147], [24, 0.037915],
                       [25, 0.038651], [26, 0.039358], [27, 0.040039], [28, 0.040695], [29, 0.041327], [30, 0.041939],
                       [31, 0.04253], [32, 0.043103], [33, 0.043658], [34, 0.044196], [35, 0.044719], [36, 0.045227]],
            'equation': [-0.019395, 0.018033],
            'string': 'y = -0.019395 + 0.018033 ln(x)',
            'r2': 0.698168,
            'predictions': [0, 0, 0.000416, 0.005604, 0.009628, 0.012916, 0.015696, 0.018104, 0.020228, 0.022128,
                            0.023846, 0.025415, 0.026859, 0.028195, 0.029439, 0.030603, 0.031696, 0.032727, 0.033702,
                            0.034627, 0.035507, 0.036346, 0.037147, 0.037915, 0.038651, 0.039358, 0.040039, 0.040695,
                            0.041327, 0.041939, 0.04253, 0.043103, 0.043658, 0.044196, 0.044719, 0.045227, 0.045721,
                            0.046202, 0.04667, 0.047127, 0.047572, 0.048006, 0.048431, 0.048845, 0.049251, 0.049647,
                            0.050035, 0.050414, 0.050786, 0.051151, 0.051508, 0.051858, 0.052201, 0.052538, 0.052869,
                            0.053194, 0.053513, 0.053827, 0.054135, 0.054438, 0.054736, 0.05503, 0.055318, 0.055602,
                            0.055882, 0.056157, 0.056428, 0.056695, 0.056959, 0.057218, 0.057474, 0.057726, 0.057975,
                            0.05822, 0.058462, 0.058701, 0.058937, 0.05917, 0.059399, 0.059626, 0.05985, 0.060071,
                            0.06029, 0.060506, 0.060719, 0.06093, 0.061139, 0.061345, 0.061549, 0.06175, 0.061949,
                            0.062146, 0.062341, 0.062534, 0.062725, 0.062914, 0.063101, 0.063286, 0.063469, 0.06365,
                            0.063829, 0.064007, 0.064183, 0.064357, 0.06453, 0.064701, 0.06487, 0.065038, 0.065204,
                            0.065369, 0.065532, 0.065694, 0.065854, 0.066013, 0.06617, 0.066326, 0.066481, 0.066635,
                            0.066787, 0.066938, 0.067087, 0.067236, 0.067383, 0.067529, 0.067674, 0.067818, 0.06796,
                            0.068102, 0.068242, 0.068381, 0.068519, 0.068657, 0.068793, 0.068928, 0.069062, 0.069195,
                            0.069327, 0.069458, 0.069588, 0.069718, 0.069846, 0.069973, 0.0701, 0.070226, 0.07035,
                            0.070474, 0.070597, 0.07072, 0.070841, 0.070962],
            'growthCombined': [0, 0.0043, 0.0072, 0.0088, 0.01, 0.0116, 0.0128, 0.013, 0.0139, 0.0148, 0.0154, 0.016,
                               0.016, 0.0171, 0.017, 0.0183, 0.0195, 0.0215, 0.023, 0.0252, 0.0266, 0.0288, 0.0322,
                               0.0343, 0.0371, 0.04, 0.0427, 0.0457, 0.0479, 0.0509, 0.0531, 0.0569, 0.0594, 0.0609,
                               0.0624, 0.0636, 0.046202, 0.04667, 0.047127, 0.047572, 0.048006, 0.048431, 0.048845,
                               0.049251, 0.049647, 0.050035, 0.050414, 0.050786, 0.051151, 0.051508, 0.051858, 0.052201,
                               0.052538, 0.052869, 0.053194, 0.053513, 0.053827, 0.054135, 0.054438, 0.054736, 0.05503,
                               0.055318, 0.055602, 0.055882, 0.056157, 0.056428, 0.056695, 0.056959, 0.057218, 0.057474,
                               0.057726, 0.057975, 0.05822, 0.058462, 0.058701, 0.058937, 0.05917, 0.059399, 0.059626,
                               0.05985, 0.060071, 0.06029, 0.060506, 0.060719, 0.06093, 0.061139, 0.061345, 0.061549,
                               0.06175, 0.061949, 0.062146, 0.062341, 0.062534, 0.062725, 0.062914, 0.063101, 0.063286,
                               0.063469, 0.06365, 0.063829, 0.064007, 0.064183, 0.064357, 0.06453, 0.064701, 0.06487,
                               0.065038, 0.065204, 0.065369, 0.065532, 0.065694, 0.065854, 0.066013, 0.06617, 0.066326,
                               0.066481, 0.066635, 0.066787, 0.066938, 0.067087, 0.067236, 0.067383, 0.067529, 0.067674,
                               0.067818, 0.06796, 0.068102, 0.068242, 0.068381, 0.068519, 0.068657, 0.068793, 0.068928,
                               0.069062, 0.069195, 0.069327, 0.069458, 0.069588, 0.069718, 0.069846, 0.069973, 0.0701,
                               0.070226, 0.07035, 0.070474, 0.070597, 0.07072, 0.070841, 0.070962, None]
        },
        '잣나무': {
            'points': [[1, -0.166863], [2, -0.064439], [3, -0.004525], [4, 0.037984], [5, 0.070957], [6, 0.097898],
                       [7, 0.120676], [8, 0.140408], [9, 0.157812], [10, 0.173381], [11, 0.187464], [12, 0.200322],
                       [13, 0.212149], [14, 0.2231], [15, 0.233295], [16, 0.242831], [17, 0.25179], [18, 0.260236],
                       [19, 0.268225], [20, 0.275804], [21, 0.283014], [22, 0.289888], [23, 0.296456], [24, 0.302745]],
            'equation': [-0.166863, 0.147766],
            'string': 'y = -0.166863 + 0.147766 ln(x)',
            'r2': 0.680663,
            'predictions': [0, 0, 0, 0.037984, 0.070957, 0.097898, 0.120676, 0.140408, 0.157812, 0.173381, 0.187464,
                            0.200322, 0.212149, 0.2231, 0.233295, 0.242831, 0.25179, 0.260236, 0.268225, 0.275804,
                            0.283014, 0.289888, 0.296456, 0.302745, 0.308777, 0.314573, 0.32015, 0.325524, 0.330709,
                            0.335718, 0.340564, 0.345255, 0.349802, 0.354213, 0.358497, 0.362659, 0.366708, 0.370649,
                            0.374487, 0.378228, 0.381877, 0.385437, 0.388914, 0.392312, 0.395632, 0.39888, 0.402058,
                            0.405169, 0.408216, 0.411201, 0.414127, 0.416996, 0.419811, 0.422573, 0.425285, 0.427947,
                            0.430563, 0.433132, 0.435658, 0.438142, 0.440584, 0.442987, 0.445351, 0.447679, 0.44997,
                            0.452226, 0.454448, 0.456637, 0.458794, 0.46092, 0.463016, 0.465083, 0.467121, 0.469131,
                            0.471115, 0.473072, 0.475004, 0.47691, 0.478793, 0.480652, 0.482487, 0.4843, 0.486091,
                            0.487861, 0.48961, 0.491338, 0.493046, 0.494735, 0.496405, 0.498056, 0.499689, 0.501304,
                            0.502901, 0.504481, 0.506045, 0.507592, 0.509124, 0.510639, 0.512139, 0.513625, 0.515095,
                            0.516551, 0.517992, 0.51942, 0.520834, 0.522235, 0.523622, 0.524997, 0.526359, 0.527708,
                            0.529045, 0.530371, 0.531684, 0.532986, 0.534277, 0.535556, 0.536824, 0.538082, 0.539329,
                            0.540566, 0.541792, 0.543008, 0.544214, 0.545411, 0.546598, 0.547775, 0.548943, 0.550102,
                            0.551252, 0.552393, 0.553525, 0.554649, 0.555764, 0.556871, 0.55797, 0.55906, 0.560143,
                            0.561218, 0.562284, 0.563344, 0.564395, 0.56544, 0.566477, 0.567506, 0.568529, 0.569545,
                            0.570553, 0.571555, 0.57255, 0.573539],
            'growthCombined': [0, 0.0092, 0.0145, 0.0177, 0.0212, 0.0276, 0.0391, 0.0532, 0.0685, 0.0851, 0.1002,
                               0.1177, 0.1406, 0.1623, 0.1875, 0.2188, 0.2493, 0.2721, 0.3064, 0.3481, 0.3813, 0.4066,
                               0.4261, 0.4375, 0.314573, 0.32015, 0.325524, 0.330709, 0.335718, 0.340564, 0.345255,
                               0.349802, 0.354213, 0.358497, 0.362659, 0.366708, 0.370649, 0.374487, 0.378228, 0.381877,
                               0.385437, 0.388914, 0.392312, 0.395632, 0.39888, 0.402058, 0.405169, 0.408216, 0.411201,
                               0.414127, 0.416996, 0.419811, 0.422573, 0.425285, 0.427947, 0.430563, 0.433132, 0.435658,
                               0.438142, 0.440584, 0.442987, 0.445351, 0.447679, 0.44997, 0.452226, 0.454448, 0.456637,
                               0.458794, 0.46092, 0.463016, 0.465083, 0.467121, 0.469131, 0.471115, 0.473072, 0.475004,
                               0.47691, 0.478793, 0.480652, 0.482487, 0.4843, 0.486091, 0.487861, 0.48961, 0.491338,
                               0.493046, 0.494735, 0.496405, 0.498056, 0.499689, 0.501304, 0.502901, 0.504481, 0.506045,
                               0.507592, 0.509124, 0.510639, 0.512139, 0.513625, 0.515095, 0.516551, 0.517992, 0.51942,
                               0.520834, 0.522235, 0.523622, 0.524997, 0.526359, 0.527708, 0.529045, 0.530371, 0.531684,
                               0.532986, 0.534277, 0.535556, 0.536824, 0.538082, 0.539329, 0.540566, 0.541792, 0.543008,
                               0.544214, 0.545411, 0.546598, 0.547775, 0.548943, 0.550102, 0.551252, 0.552393, 0.553525,
                               0.554649, 0.555764, 0.556871, 0.55797, 0.55906, 0.560143, 0.561218, 0.562284, 0.563344,
                               0.564395, 0.56544, 0.566477, 0.567506, 0.568529, 0.569545, 0.570553, 0.571555, 0.57255,
                               0.573539, None]
        },
        '일본잎갈나무': {
            'points': [[1, -0.343145], [2, -0.181998], [3, -0.087733], [4, -0.020851], [5, 0.031027], [6, 0.073414],
                       [7, 0.109252], [8, 0.140296], [9, 0.167679], [10, 0.192174], [11, 0.214332], [12, 0.234561],
                       [13, 0.25317], [14, 0.270399], [15, 0.286439], [16, 0.301443], [17, 0.315537], [18, 0.328826],
                       [19, 0.341396], [20, 0.353321], [21, 0.364664], [22, 0.375479], [23, 0.385814], [24, 0.395708],
                       [25, 0.405199], [26, 0.414317], [27, 0.423091], [28, 0.431546], [29, 0.439704], [30, 0.447586],
                       [31, 0.455209], [32, 0.46259], [33, 0.469744], [34, 0.476684], [35, 0.483424], [36, 0.489973],
                       [37, 0.496343], [38, 0.502543], [39, 0.508582], [40, 0.514468], [41, 0.520209]],
            'equation': [-0.343145, 0.232486],
            'string': 'y = -0.343145 + 0.232486 ln(x)',
            'r2': 0.69078,
            'predictions': [0, 0, 0, 0, 0.031027, 0.073414, 0.109252, 0.140296, 0.167679, 0.192174, 0.214332, 0.234561,
                            0.25317, 0.270399, 0.286439, 0.301443, 0.315537, 0.328826, 0.341396, 0.353321, 0.364664,
                            0.375479, 0.385814, 0.395708, 0.405199, 0.414317, 0.423091, 0.431546, 0.439704, 0.447586,
                            0.455209, 0.46259, 0.469744, 0.476684, 0.483424, 0.489973, 0.496343, 0.502543, 0.508582,
                            0.514468, 0.520209, 0.525811, 0.531281, 0.536626, 0.541851, 0.546961, 0.55196, 0.556855,
                            0.561649, 0.566346, 0.570949, 0.575464, 0.579892, 0.584238, 0.588504, 0.592693, 0.596808,
                            0.600851, 0.604825, 0.608733, 0.612576, 0.616356, 0.620076, 0.623737, 0.627342, 0.630891,
                            0.634387, 0.637831, 0.641225, 0.644571, 0.647868, 0.65112, 0.654327, 0.65749, 0.660611,
                            0.66369, 0.666729, 0.669729, 0.67269, 0.675615, 0.678503, 0.681356, 0.684174, 0.686958,
                            0.689709, 0.692428, 0.695116, 0.697773, 0.7004, 0.702998, 0.705567, 0.708108, 0.710621,
                            0.713107, 0.715568, 0.718002, 0.720411, 0.722796, 0.725156, 0.727493, 0.729806, 0.732096,
                            0.734365, 0.736611, 0.738836, 0.741039, 0.743222, 0.745385, 0.747528, 0.749651, 0.751755,
                            0.75384, 0.755906, 0.757955, 0.759985, 0.761998, 0.763994, 0.765972, 0.767934, 0.76988,
                            0.771809, 0.773723, 0.77562, 0.777503, 0.77937, 0.781223, 0.783061, 0.784884, 0.786693,
                            0.788489, 0.79027, 0.792038, 0.793793, 0.795534, 0.797263, 0.798978, 0.800682, 0.802373,
                            0.804051, 0.805718, 0.807372, 0.809015, 0.810647, 0.812267, 0.813876, 0.815474, 0.817061,
                            0.818637, 0.820202, 0.821758],
            'growthCombined': [0, 0.013, 0.0209, 0.0263, 0.0306, 0.0336, 0.037, 0.0407, 0.0497, 0.0609, 0.0744, 0.0842,
                               0.0983, 0.118, 0.1341, 0.1564, 0.1764, 0.1953, 0.2136, 0.232, 0.2547, 0.2697, 0.2888,
                               0.3193, 0.3457, 0.375, 0.4038, 0.4274, 0.4582, 0.4842, 0.504, 0.5371, 0.5707, 0.6056,
                               0.6345, 0.6488, 0.6631, 0.6858, 0.6996, 0.7219, 0.7491, 0.531281, 0.536626, 0.541851,
                               0.546961, 0.55196, 0.556855, 0.561649, 0.566346, 0.570949, 0.575464, 0.579892, 0.584238,
                               0.588504, 0.592693, 0.596808, 0.600851, 0.604825, 0.608733, 0.612576, 0.616356, 0.620076,
                               0.623737, 0.627342, 0.630891, 0.634387, 0.637831, 0.641225, 0.644571, 0.647868, 0.65112,
                               0.654327, 0.65749, 0.660611, 0.66369, 0.666729, 0.669729, 0.67269, 0.675615, 0.678503,
                               0.681356, 0.684174, 0.686958, 0.689709, 0.692428, 0.695116, 0.697773, 0.7004, 0.702998,
                               0.705567, 0.708108, 0.710621, 0.713107, 0.715568, 0.718002, 0.720411, 0.722796, 0.725156,
                               0.727493, 0.729806, 0.732096, 0.734365, 0.736611, 0.738836, 0.741039, 0.743222, 0.745385,
                               0.747528, 0.749651, 0.751755, 0.75384, 0.755906, 0.757955, 0.759985, 0.761998, 0.763994,
                               0.765972, 0.767934, 0.76988, 0.771809, 0.773723, 0.77562, 0.777503, 0.77937, 0.781223,
                               0.783061, 0.784884, 0.786693, 0.788489, 0.79027, 0.792038, 0.793793, 0.795534, 0.797263,
                               0.798978, 0.800682, 0.802373, 0.804051, 0.805718, 0.807372, 0.809015, 0.810647, 0.812267,
                               0.813876, 0.815474, 0.817061, 0.818637, 0.820202, 0.821758, None]
        },
        '상수리나무': {
            'points': [[1, -0.084848], [2, -0.039047], [3, -0.012255], [4, 0.006754], [5, 0.021499], [6, 0.033546],
                       [7, 0.043732], [8, 0.052555], [9, 0.060338], [10, 0.0673], [11, 0.073598], [12, 0.079347],
                       [13, 0.084636], [14, 0.089533], [15, 0.094092], [16, 0.098356], [17, 0.102362], [18, 0.106139],
                       [19, 0.109712], [20, 0.113101], [21, 0.116325], [22, 0.119399], [23, 0.122336], [24, 0.125148],
                       [25, 0.127846], [26, 0.130437], [27, 0.132931], [28, 0.135334], [29, 0.137653], [30, 0.139893],
                       [31, 0.14206]],
            'equation': [-0.084848, 0.066077],
            'string': 'y = -0.084848 + 0.066077 ln(x)',
            'r2': 0.60809,
            'predictions': [0, 0, 0, 0.006754, 0.021499, 0.033546, 0.043732, 0.052555, 0.060338, 0.0673, 0.073598,
                            0.079347, 0.084636, 0.089533, 0.094092, 0.098356, 0.102362, 0.106139, 0.109712, 0.113101,
                            0.116325, 0.119399, 0.122336, 0.125148, 0.127846, 0.130437, 0.132931, 0.135334, 0.137653,
                            0.139893, 0.14206, 0.144157, 0.146191, 0.148163, 0.150079, 0.15194, 0.153751, 0.155513,
                            0.157229, 0.158902, 0.160534, 0.162126, 0.163681, 0.1652, 0.166685, 0.168137, 0.169558,
                            0.170949, 0.172312, 0.173647, 0.174955, 0.176238, 0.177497, 0.178732, 0.179945, 0.181135,
                            0.182305, 0.183454, 0.184583, 0.185694, 0.186786, 0.187861, 0.188918, 0.189959, 0.190983,
                            0.191992, 0.192985, 0.193964, 0.194929, 0.19588, 0.196817, 0.197741, 0.198653, 0.199552,
                            0.200439, 0.201314, 0.202178, 0.20303, 0.203872, 0.204703, 0.205524, 0.206335, 0.207136,
                            0.207927, 0.208709, 0.209482, 0.210246, 0.211001, 0.211748, 0.212486, 0.213216, 0.213938,
                            0.214653, 0.215359, 0.216059, 0.21675, 0.217435, 0.218113, 0.218784, 0.219448, 0.220105,
                            0.220756, 0.221401, 0.222039, 0.222672, 0.223298, 0.223919, 0.224533, 0.225142, 0.225746,
                            0.226344, 0.226936, 0.227524, 0.228106, 0.228683, 0.229255, 0.229822, 0.230385, 0.230942,
                            0.231495, 0.232043, 0.232587, 0.233127, 0.233662, 0.234192, 0.234719, 0.235241, 0.23576,
                            0.236274, 0.236784, 0.23729, 0.237793, 0.238292, 0.238787, 0.239278, 0.239765, 0.24025,
                            0.24073, 0.241207, 0.241681, 0.242151, 0.242618, 0.243082, 0.243542, 0.244, 0.244454,
                            0.244905, 0.245353, 0.245798, 0.24624],
            'growthCombined': [0, 0.0055, 0.0088, 0.0113, 0.0134, 0.0145, 0.0163, 0.0191, 0.0221, 0.0256, 0.031, 0.0373,
                               0.0447, 0.0513, 0.0568, 0.0637, 0.0708, 0.0778, 0.0854, 0.0929, 0.1002, 0.1092, 0.1174,
                               0.1251, 0.1304, 0.1363, 0.1413, 0.217, 0.2285, 0.235, 0.2411, 0.146191, 0.148163,
                               0.150079, 0.15194, 0.153751, 0.155513, 0.157229, 0.158902, 0.160534, 0.162126, 0.163681,
                               0.1652, 0.166685, 0.168137, 0.169558, 0.170949, 0.172312, 0.173647, 0.174955, 0.176238,
                               0.177497, 0.178732, 0.179945, 0.181135, 0.182305, 0.183454, 0.184583, 0.185694, 0.186786,
                               0.187861, 0.188918, 0.189959, 0.190983, 0.191992, 0.192985, 0.193964, 0.194929, 0.19588,
                               0.196817, 0.197741, 0.198653, 0.199552, 0.200439, 0.201314, 0.202178, 0.20303, 0.203872,
                               0.204703, 0.205524, 0.206335, 0.207136, 0.207927, 0.208709, 0.209482, 0.210246, 0.211001,
                               0.211748, 0.212486, 0.213216, 0.213938, 0.214653, 0.215359, 0.216059, 0.21675, 0.217435,
                               0.218113, 0.218784, 0.219448, 0.220105, 0.220756, 0.221401, 0.222039, 0.222672, 0.223298,
                               0.223919, 0.224533, 0.225142, 0.225746, 0.226344, 0.226936, 0.227524, 0.228106, 0.228683,
                               0.229255, 0.229822, 0.230385, 0.230942, 0.231495, 0.232043, 0.232587, 0.233127, 0.233662,
                               0.234192, 0.234719, 0.235241, 0.23576, 0.236274, 0.236784, 0.23729, 0.237793, 0.238292,
                               0.238787, 0.239278, 0.239765, 0.24025, 0.24073, 0.241207, 0.241681, 0.242151, 0.242618,
                               0.243082, 0.243542, 0.244, 0.244454, 0.244905, 0.245353, 0.245798, 0.24624, None]
        },
        '신갈나무': {
            'points': [[1, 0.002451], [2, 0.011237], [3, 0.016376], [4, 0.020022], [5, 0.022851], [6, 0.025162],
                       [7, 0.027115], [8, 0.028808], [9, 0.030301], [10, 0.031636], [11, 0.032844], [12, 0.033947],
                       [13, 0.034962], [14, 0.035901], [15, 0.036776], [16, 0.037594], [17, 0.038362], [18, 0.039086],
                       [19, 0.039772], [20, 0.040422], [21, 0.04104], [22, 0.04163], [23, 0.042193], [24, 0.042733],
                       [25, 0.04325], [26, 0.043747], [27, 0.044226], [28, 0.044687], [29, 0.045131], [30, 0.045561],
                       [31, 0.045977], [32, 0.046379], [33, 0.046769], [34, 0.047148]],
            'equation': [0.002451, 0.012675],
            'string': 'y = 0.002451 + 0.012675 ln(x)',
            'r2': 0.984203,
            'predictions': [0.002451, 0.011237, 0.016376, 0.020022, 0.022851, 0.025162, 0.027115, 0.028808, 0.030301,
                            0.031636, 0.032844, 0.033947, 0.034962, 0.035901, 0.036776, 0.037594, 0.038362, 0.039086,
                            0.039772, 0.040422, 0.04104, 0.04163, 0.042193, 0.042733, 0.04325, 0.043747, 0.044226,
                            0.044687, 0.045131, 0.045561, 0.045977, 0.046379, 0.046769, 0.047148, 0.047515, 0.047872,
                            0.048219, 0.048557, 0.048887, 0.049208, 0.049521, 0.049826, 0.050124, 0.050416, 0.0507,
                            0.050979, 0.051252, 0.051518, 0.05178, 0.052036, 0.052287, 0.052533, 0.052774, 0.053011,
                            0.053244, 0.053472, 0.053697, 0.053917, 0.054134, 0.054347, 0.054556, 0.054762, 0.054965,
                            0.055165, 0.055361, 0.055555, 0.055745, 0.055933, 0.056118, 0.056301, 0.05648, 0.056658,
                            0.056833, 0.057005, 0.057175, 0.057343, 0.057509, 0.057672, 0.057834, 0.057993, 0.058151,
                            0.058306, 0.05846, 0.058612, 0.058762, 0.05891, 0.059056, 0.059201, 0.059344, 0.059486,
                            0.059626, 0.059765, 0.059902, 0.060037, 0.060171, 0.060304, 0.060435, 0.060565, 0.060694,
                            0.060822, 0.060948, 0.061073, 0.061196, 0.061319, 0.06144, 0.06156, 0.061679, 0.061797,
                            0.061914, 0.06203, 0.062144, 0.062258, 0.062371, 0.062482, 0.062593, 0.062703, 0.062812,
                            0.062919, 0.063026, 0.063132, 0.063238, 0.063342, 0.063445, 0.063548, 0.06365, 0.063751,
                            0.063851, 0.06395, 0.064049, 0.064147, 0.064244, 0.064341, 0.064436, 0.064531, 0.064625,
                            0.064719, 0.064812, 0.064904, 0.064995, 0.065086, 0.065177, 0.065266, 0.065355, 0.065443,
                            0.065531, 0.065618, 0.065705, 0.065791, 0.065876, 0.065961],
            'growthCombined': [0, 0.0101, 0.0156, 0.0196, 0.0225, 0.0254, 0.0275, 0.0298, 0.0311, 0.0325, 0.0339,
                               0.0353, 0.0359, 0.0373, 0.0387, 0.0404, 0.0396, 0.0413, 0.0405, 0.0425, 0.0421, 0.042,
                               0.042, 0.0422, 0.0424, 0.0426, 0.043, 0.0432, 0.0437, 0.0439, 0.0444, 0.0446, 0.0451,
                               0.0454, 0.047872, 0.048219, 0.048557, 0.048887, 0.049208, 0.049521, 0.049826, 0.050124,
                               0.050416, 0.0507, 0.050979, 0.051252, 0.051518, 0.05178, 0.052036, 0.052287, 0.052533,
                               0.052774, 0.053011, 0.053244, 0.053472, 0.053697, 0.053917, 0.054134, 0.054347, 0.054556,
                               0.054762, 0.054965, 0.055165, 0.055361, 0.055555, 0.055745, 0.055933, 0.056118, 0.056301,
                               0.05648, 0.056658, 0.056833, 0.057005, 0.057175, 0.057343, 0.057509, 0.057672, 0.057834,
                               0.057993, 0.058151, 0.058306, 0.05846, 0.058612, 0.058762, 0.05891, 0.059056, 0.059201,
                               0.059344, 0.059486, 0.059626, 0.059765, 0.059902, 0.060037, 0.060171, 0.060304, 0.060435,
                               0.060565, 0.060694, 0.060822, 0.060948, 0.061073, 0.061196, 0.061319, 0.06144, 0.06156,
                               0.061679, 0.061797, 0.061914, 0.06203, 0.062144, 0.062258, 0.062371, 0.062482, 0.062593,
                               0.062703, 0.062812, 0.062919, 0.063026, 0.063132, 0.063238, 0.063342, 0.063445, 0.063548,
                               0.06365, 0.063751, 0.063851, 0.06395, 0.064049, 0.064147, 0.064244, 0.064341, 0.064436,
                               0.064531, 0.064625, 0.064719, 0.064812, 0.064904, 0.064995, 0.065086, 0.065177, 0.065266,
                               0.065355, 0.065443, 0.065531, 0.065618, 0.065705, 0.065791, 0.065876, 0.065961, None]
        }
    }
}



class Manager:
    def __init__(self, json_data):


########################################################################
#              Define Initial Conditions From Manager                  #
########################################################################
spc2ID = {obj['species']: obj['speciesID'] for obj in manager['spcClasses']}
'''
{
    '소나무': 'O',
    '리기다소나무': 'C',
    '잣나무': 'K',
    '일본잎갈나무': 'L',
    '상수리나무': 'S',
    '신갈나무': 'B'
}
'''  # spc_to_ID: 전체 수종명을 입력하면 수종 ID로 바꿔주는 딕셔너리

ID2spc = {obj['speciesID']: obj['species'] for obj in manager['spcClasses']}
'''
{
    'O': '소나무',
    'C': '리기다소나무',
    'K': '잣나무',
    'L': '일본잎갈나무',
    'S': '상수리나무',
    'B': '신갈나무'
}
'''  # ID_to_spc: spcID를 입력하면 전체 수종명으로 바꿔주는 딕셔너리

spcIDList = list(spc2ID.values())
'''
['O', 'C', 'K', 'L', 'S', 'B']
'''  # spcIDList: 사용자가 순서대로 입력한 spcID 리스트

initialConditions = list()
for currentSpc in manager['currentSpc']:
    temp_dict = currentSpc.copy()
    temp_dict['spcID'] = spc2ID[temp_dict['species']];
    temp_dict['periodBorn'] = 1 - temp_dict['age']

    forManPlan = next(item for item in manager['forManPlan']
                      if (item['section'] == temp_dict['section']) &
                      (item['species'] == temp_dict['species'])
                      )

    if temp_dict['periodBorn'] + forManPlan['clearCutYear'] <= 0:
        temp_dict['periodDied'] = 1
    else:
        temp_dict['periodDied'] = temp_dict['periodBorn'] + forManPlan['clearCutYear']
    temp_dict['clearCutYear'] = forManPlan['clearCutYear']

    if 'thinningScenario' in forManPlan:  # thinningScenario key 가 존재하면
        temp_dict['thinningScenario'] = forManPlan['thinningScenario']
    else:  # 키가 존재하지 않는 경우 계획 기간 길이만큼 zeros 생성
        temp_dict['thinningScenario'] = [0 for _ in range(manager['planningPeriod'])]

    temp_dict['spcGrowth'] = manager['spcGrowth'][temp_dict['species']]

    initialConditions.append(temp_dict)
'''
{
     'section': 1,
     'species': '잣나무',
     'spcID': 'K',
     'age': 8,
     'area': 208.7,
     'volume': 394.7714,
     'periodBorn': -7,
     'periodDied': 1,
     'clearCutYear': 7,
     'thinningScenario': [0, 0.3, 0, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
     'spcGrowth': {
         'points': [[1, -0.166863], [2, -0.064439], [3, -0.004525], [4, 0.037984], [5, 0.070957], [6, 0.097898],
                    [7, 0.120676], [8, 0.140408], [9, 0.157812], [10, 0.173381], [11, 0.187464], [12, 0.200322],
                    [13, 0.212149], [14, 0.2231], [15, 0.233295], [16, 0.242831], [17, 0.25179], [18, 0.260236],
                    [19, 0.268225], [20, 0.275804], [21, 0.283014], [22, 0.289888], [23, 0.296456], [24, 0.302745]],
         'equation': [-0.166863, 0.147766],
         'string': 'y = -0.166863 + 0.147766 ln(x)',
         'r2': 0.680663,
         'predictions': [0, 0, 0, 0.037984, 0.070957, 0.097898, 0.120676, 0.140408, 0.157812, 0.173381, 0.187464,
                         0.200322, 0.212149, 0.2231, 0.233295, 0.242831, 0.25179, 0.260236, 0.268225, 0.275804,
                         0.283014, 0.289888, 0.296456, 0.302745, 0.308777, 0.314573, 0.32015, 0.325524, 0.330709,
                         0.335718, 0.340564, 0.345255, 0.349802, 0.354213, 0.358497, 0.362659, 0.366708, 0.370649,
                         0.374487, 0.378228, 0.381877, 0.385437, 0.388914, 0.392312, 0.395632, 0.39888, 0.402058,
                         0.405169, 0.408216, 0.411201, 0.414127, 0.416996, 0.419811, 0.422573, 0.425285, 0.427947,
                         0.430563, 0.433132, 0.435658, 0.438142, 0.440584, 0.442987, 0.445351, 0.447679, 0.44997,
                         0.452226, 0.454448, 0.456637, 0.458794, 0.46092, 0.463016, 0.465083, 0.467121, 0.469131,
                         0.471115, 0.473072, 0.475004, 0.47691, 0.478793, 0.480652, 0.482487, 0.4843, 0.486091,
                         0.487861, 0.48961, 0.491338, 0.493046, 0.494735, 0.496405, 0.498056, 0.499689, 0.501304,
                         0.502901, 0.504481, 0.506045, 0.507592, 0.509124, 0.510639, 0.512139, 0.513625, 0.515095,
                         0.516551, 0.517992, 0.51942, 0.520834, 0.522235, 0.523622, 0.524997, 0.526359, 0.527708,
                         0.529045, 0.530371, 0.531684, 0.532986, 0.534277, 0.535556, 0.536824, 0.538082, 0.539329,
                         0.540566, 0.541792, 0.543008, 0.544214, 0.545411, 0.546598, 0.547775, 0.548943, 0.550102,
                         0.551252, 0.552393, 0.553525, 0.554649, 0.555764, 0.556871, 0.55797, 0.55906, 0.560143,
                         0.561218, 0.562284, 0.563344, 0.564395, 0.56544, 0.566477, 0.567506, 0.568529, 0.569545,
                         0.570553, 0.571555, 0.57255, 0.573539],
         'growthCombined': [0, 0.0092, 0.0145, 0.0177, 0.0212, 0.0276, 0.0391, 0.0532, 0.0685, 0.0851, 0.1002, 0.1177,
                            0.1406, 0.1623, 0.1875, 0.2188, 0.2493, 0.2721, 0.3064, 0.3481, 0.3813, 0.4066, 0.4261,
                            0.4375, 0.314573, 0.32015, 0.325524, 0.330709, 0.335718, 0.340564, 0.345255, 0.349802,
                            0.354213, 0.358497, 0.362659, 0.366708, 0.370649, 0.374487, 0.378228, 0.381877, 0.385437,
                            0.388914, 0.392312, 0.395632, 0.39888, 0.402058, 0.405169, 0.408216, 0.411201, 0.414127,
                            0.416996, 0.419811, 0.422573, 0.425285, 0.427947, 0.430563, 0.433132, 0.435658, 0.438142,
                            0.440584, 0.442987, 0.445351, 0.447679, 0.44997, 0.452226, 0.454448, 0.456637, 0.458794,
                            0.46092, 0.463016, 0.465083, 0.467121, 0.469131, 0.471115, 0.473072, 0.475004, 0.47691,
                            0.478793, 0.480652, 0.482487, 0.4843, 0.486091, 0.487861, 0.48961, 0.491338, 0.493046,
                            0.494735, 0.496405, 0.498056, 0.499689, 0.501304, 0.502901, 0.504481, 0.506045, 0.507592,
                            0.509124, 0.510639, 0.512139, 0.513625, 0.515095, 0.516551, 0.517992, 0.51942, 0.520834,
                            0.522235, 0.523622, 0.524997, 0.526359, 0.527708, 0.529045, 0.530371, 0.531684, 0.532986,
                            0.534277, 0.535556, 0.536824, 0.538082, 0.539329, 0.540566, 0.541792, 0.543008, 0.544214,
                            0.545411, 0.546598, 0.547775, 0.548943, 0.550102, 0.551252, 0.552393, 0.553525, 0.554649,
                            0.555764, 0.556871, 0.55797, 0.55906, 0.560143, 0.561218, 0.562284, 0.563344, 0.564395,
                            0.56544, 0.566477, 0.567506, 0.568529, 0.569545, 0.570553, 0.571555, 0.57255, 0.573539,
                            None]
     }
 }
'''  # initialConditions: 초기 조건값들

currentVolumeTables = list()
for initialCondition in initialConditions:
    currentVolumeTable = dict()
    currentVolumeTable['section'] = initialCondition['section']
    currentVolumeTable['spcID'] = initialCondition['spcID']
    currentVolumeTable['currentAge'] = initialCondition['age']
    currentVolumeTable['clearCutYear'] = initialCondition['clearCutYear']
    growthData = initialCondition['spcGrowth']['predictions'].copy()

    ratio = initialCondition['volume'] / growthData[10 * initialCondition['age'] - 1]
    growthData = [x * ratio for x in growthData]

    temp_current_volume_data = dict()
    age = 1
    if currentVolumeTable['currentAge'] < initialCondition['clearCutYear']:
        per = 1
        while age < initialCondition['clearCutYear']:
            age = currentVolumeTable['currentAge'] + per - 1
            prod = growthData[10 * age - 1] * initialCondition['thinningScenario'][age - 1]

            if age == initialCondition['clearCutYear']:
                prod = growthData[10 * age - 1]

            growthData = [x - prod for x in growthData]  # Subtract the amount of thinning from the growth data
            vol = growthData[10 * age - 1]  # Volume after subtracting

            temp_current_volume_data[per] = {
                'period': per,
                'age': age,
                'volume': vol,
                'produced': prod
            }
            per += 1
    else:  # 현재 영급이 주벌시기를 지나버린 경우
        per = 1
        age = currentVolumeTable['currentAge'] + per - 1
        vol = 0
        prod = growthData[10 * age - 1]
        temp_current_volume_data[per] = {
            'period': per,
            'age': age,
            'volume': vol,
            'produced': prod
        }
    currentVolumeTable['data'] = temp_current_volume_data
    currentVolumeTables.append(currentVolumeTable)
'''
{
     'section': 1,
     'spcID': 'K',
     'currentAge': 6,
     'data': {
         1: {
             'period': 1,
             'age': 6,
             'volume': 167.12,
             'produced': 0.0
         },
         2: {
             'period': 2,
             'age': 7,
             'volume': 0.0,
             'produced': 175.80818638706174
         },
         3: {
             'period': 3,
             'age': 8,
             'volume': 7.526354104377134,
             'produced': 0.0
         },
         4: {
             'period': 4,
             'age': 9,
             'volume': 14.164741841686038,
             'produced': 0.0
         },
         5: {
             'period': 5,
             'age': 10,
             'volume': 20.103207635880608,
             'produced': 0.0
         },
         6: {
             'period': 6,
             'age': 11,
             'volume': 25.474870156250688,
             'produced': 0.0
         }
     }
 }
'''  # currentVolumeTables: 현재 존재하는 나무들에 대한


futureVolumeTables = list()
for sec in range(manager['numSections']):
    sec += 1
    for spcID in spcIDList:
        growthData = manager['spcGrowth'][ID2spc[spcID]]['predictions'].copy()
        growthData = [x * DENSITY for x in growthData]

        futureVolumeTable = dict()
        futureVolumeTable['section'] = sec
        futureVolumeTable['spcID'] = spcID

        temp_future_volume_data = dict()
        forManPlan = next(item for item in manager['forManPlan']
                          if (item['section'] == sec) &
                          (item['species'] == ID2spc[spcID])
                          )
        clearCutYear = forManPlan['clearCutYear']
        if 'thinningScenario' in forManPlan:
            thinningScenario = forManPlan['thinningScenario']
        else:
            thinningScenario = [0 for _ in range(clearCutYear)]

        for per in range(clearCutYear):
            per += 1  # To start from 1. per => 1, 2, 3 .. 7 (clearCutYear = 7)
            prod = growthData[10 * per - 1] * thinningScenario[per - 1]
            if per == clearCutYear:
                prod = growthData[10 * per - 1]

            growthData = [x - prod for x in growthData]
            vol = growthData[10 * per - 1]
            temp_future_volume_data[per] = {
                'period': per,
                'age': per,
                'volume': vol,
                'produced': prod
            }
        futureVolumeTable['data'] = temp_future_volume_data
        futureVolumeTables.append(futureVolumeTable)
'''
{
     'section': 1,
     'spcID': 'O',
     'data': {
         1: {
             'period': 1,
             'age': 1,
             'volume': 235.05,
             'produced': 0.0
         },
         2: {
             'period': 2,
             'age': 2,
             'volume': 238.5432,
             'produced': 102.2328
         },
         3: {
             'period': 3,
             'age': 3,
             'volume': 300.3882,
             'produced': 0.0
         },
         4: {
             'period': 4,
             'age': 4,
             'volume': 240.98844000000003,
             'produced': 103.28076
         },
         5: {
             'period': 5,
             'age': 5,
             'volume': 275.02344,
             'produced': 0.0
         },
         6: {
             'period': 6,
             'age': 6,
             'volume': 302.83344,
             'produced': 0.0
         },
         7: {
             'period': 7,
             'age': 7,
             'volume': 0.0,
             'produced': 326.34443999999996
         }
     }
 }
'''


########################################################################
#                      Create Decision Variables                       #
########################################################################
regenerationRules = [
    {'section': 1, 'spcID': 'B', 'regenerationRule': ['S', 'B']},
    {'section': 1, 'spcID': 'S', 'regenerationRule': ['S', 'B']},
]  # 1 구역의 B는 S, B 로만 갱신


class DecisionVariablesClass:
    duplicateCheckKeys = ['section', 'spcID', 'periodDied', 'regenSpcID']  # 중복 여부 검사할 딕셔너리 키들
    # sortKeys = ['section', 'periodBorn', 'spcID', 'periodDied', regenSpcID']

    def __init__(self):
        self.list = list()

    def is_duplicate(self, condition):
        if self.list == []:
            return False
        for dv in self.list:
            allKeyMatched = False
            for key in self.duplicateCheckKeys:
                if dv[key] != condition[key]:
                    allKeyMatched = False
                    break
                allKeyMatched = True
            if allKeyMatched:
                return True
        return False

    def add(self, condition):
        if self.is_duplicate(condition):
            return
        pd_string = str(condition['periodDied'])
        if condition['periodDied'] > manager['planningPeriod']:
            pd_string = '.'
        self.list.append(dict(
            type='Variable',
            ID='DecisionVariable',
            section=condition['section'],
            spcID=condition['spcID'],
            periodBorn=condition['periodBorn'],
            periodDied=condition['periodDied'],
            regenSpcID=condition['regenSpcID'],
            name=str(condition['section']) +
                 '_'+str(condition['periodBorn']) +
                 condition['spcID']+pd_string +
                 condition['regenSpcID']
        ))

    def sort(self):
        self.list = sorted(self.list,
                           key=lambda e: (e['section'], e['periodBorn'], spcIDList.index(e['spcID']), e['periodDied']))


DecisionVariables = DecisionVariablesClass()


def create_decision_variables(condition):
    if condition['periodBorn'] > manager['planningPeriod']:
        return False
    regenSpcIDList = spcIDList
    search_results = [x for x in regenerationRules
                        if ((x['section'] == condition['section']) & (x['spcID'] == condition['spcID']))
                     ]
    if len(search_results) > 0:
        regenSpcIDList = search_results[0]['regenerationRule']

    # 계획기간을 넘어, 주벌 & 갱신을 안하는 경우 한번 추가하고, 이후 반복문은 실행 X
    if condition['periodBorn'] + condition['clearCutYear'] > manager['planningPeriod']:
        condition['regenSpcID'] = '.'
        DecisionVariables.add(condition)
        return False

    #  계획기간 내, 주벌 & 갱신 모두 함. 수종에 따라, 주벌시기가 계획기간 이상일 수도, 이내일 수도 있으므로 고려.
    for regenSpcID in regenSpcIDList:
        newCondition = condition.copy()  # To prevent changing of initialCondition values. Making a Copy.
        newCondition['regenSpcID'] = regenSpcID
        DecisionVariables.add(newCondition)  # regenSpcID 만 할당한 뒤에 추가.

        newCondition['spcID'] = regenSpcID
        newCondition['species'] = ID2spc[newCondition['spcID']]
        newCondition['periodBorn'] = newCondition['periodDied']
        newCondition['clearCutYear'] = next(item for item in manager['forManPlan']
                                      if (item['section'] == newCondition['section']) &
                                      (item['species'] == newCondition['species']))['clearCutYear']
        newCondition['periodDied'] = newCondition['periodBorn'] + newCondition['clearCutYear']
        create_decision_variables(newCondition)


for initialCondition in initialConditions:
    create_decision_variables(initialCondition)
DecisionVariables.sort()

########################################################################
#                     Create Accounting Variables                      #
########################################################################
# Naming Rules: 각 요소의 순서대로 이름을 생성. undefined 인 경우 그 key 를 그대로 이름에 활용.
ID2AccVarNameRules = {
    'Vol_SpcPer': ['spcID', 'V', '.', 'period'],  # 특정 수종의 분기별 재적
    'Area_SpcSecPer': ['section', 'spcID', 'A',  '.', 'period'],  # 2KA.10 => 10분기의 2구역, K 수종의 면적
    'Area_SpcPer': ['spcID', 'A', '.', 'period'],  # KA.10 => 10분기의 K 수종의 면적.
    'Area_AgePer': ['AC', 'age', '.', 'period'],  # AC1.10 => 10분기에 AgeClass 가 1 인 면적
    'Thin_SpcPer': ['spcID', 'T', '.', 'period'],  # KT.10 => 10분기에 K 수종의 간벌량
    'Harv_SpcPer': ['spcID', 'H', '.', 'period'],  # KH.10 => 10분기에 H 수종의 수확량
    'PThin_Per': ['T', '.', 'period'],  # T.10 => 10 분기의 간벌 생산량
    'PHarv_Per': ['H', '.', 'period'],  # H.10 => 10 분기의 주벌 생산량
    'PThinHarv_Per': ['TH', '.', 'period'],
    'Carbon_Per': ['C', '.', 'period'],
    'Water_Per': ['W', '.', 'period'],
    'Labor_Per': ['J', '.', 'period'],
    'TCost_Per': ['TC', '.', 'period'],
    'TRev_Per': ['TR', '.', 'period'],
    'TNet_Per': ['ft', '.', 'period'],
    'HCost_Per': ['HC', '.', 'period'],
    'HRev_Per': ['HR', '.', 'period'],
    'HNet_Per': ['fh', '.', 'period'],
    'f_Per': ['f', '.', 'period'],
    'g_Per': ['g', '.', 'period'],
    'h_Per': ['h', '.', 'period'],
    'NPV_f_Per': ['NPV_f', '.', 'period'],
    'NPV_g_Per': ['NPV_g', '.', 'period'],
    'NPV_h_Per': ['NPV_h', '.', 'period'],
    'NPV_f': ['NPV_f'],
    'NPV_g': ['NPV_g'],
    'NPV_h': ['NPV_h'],
}
AccVarIDList = ID2AccVarNameRules.keys()


class AccountingVariablesClass:
    duplicateCheckKeys = ['name']  # 중복 여부 검사할 딕셔너리 키들

    def __init__(self):
        self.list = list()

    def is_duplicate(self, condition):
        if self.list == []:
            return False
        for av in self.list:
            all_key_matched = False
            for key in self.duplicateCheckKeys:
                if av[key] != condition[key]:
                    all_key_matched = False
                    break
                all_key_matched = True
            if all_key_matched:
                return True
        return False

    def create_name(self, condition):
        name = ''
        for datakey in ID2AccVarNameRules[condition['ID']]:
            if not datakey in condition:
                name += str(datakey)
            else:
                name += str(condition[datakey])
        return name

    def add(self, condition):
        condition['name'] = self.create_name(condition)
        if self.is_duplicate(condition):
            return
        temp_dict_accvar = dict(
            type='Variable',
            ID=condition['ID'],
            period=condition['period'],
            name=condition['name']
        )
        if 'section' in ID2AccVarNameRules[temp_dict_accvar['ID']]:
            temp_dict_accvar['section'] = condition['section']
        if 'spcID' in ID2AccVarNameRules[temp_dict_accvar['ID']]:
            temp_dict_accvar['spcID'] = condition['spcID']
        if 'age' in ID2AccVarNameRules[temp_dict_accvar['ID']]:
            temp_dict_accvar['age'] = condition['age']
        self.list.append(temp_dict_accvar)


AccountingVariables = AccountingVariablesClass()

ageMax = 0
for FM_dict in manager['forManPlan']:
    if ageMax < FM_dict['clearCutYear']:
        ageMax = FM_dict['clearCutYear']

for ID in ID2AccVarNameRules:
    for sec in range(manager['numSections']):
        sec += 1
        for spcID in spcIDList:
            for age in range(ageMax):
                age += 1
                for per in range(manager['planningPeriod']):
                    per += 1
                    AccountingVariables.add({'ID': ID, 'section': sec, 'spcID': spcID, 'age': age, 'period': per})

Variables = DecisionVariables.list + AccountingVariables.list

########################################################################
#              Create Decision Variables' Equation Names               #
########################################################################


class DecisionVariableEquationNamesClass:
    duplicateCheckKeys = ['section', 'spcID', 'periodBorn']

    def __init__(self):
        self.list = list()

    def is_duplicate(self, condition):
        if self.list == []:
            return False
        for dv in self.list:
            allKeyMatched = False
            for key in self.duplicateCheckKeys:
                if dv[key] != condition[key]:
                    allKeyMatched = False
                    break
                allKeyMatched = True
            if allKeyMatched:
                return True
        return False

    def add(self, condition):
        if self.is_duplicate(condition):
            return
        self.list.append(dict(
            type='EquationName',
            ID='DecisionVariable',
            section=condition['section'],
            spcID=condition['spcID'],
            periodBorn=condition['periodBorn'],
            name=str(condition['section']) +
                 '_'+str(condition['periodBorn']) +
                 condition['spcID']
        ))

DecisionVariableEquationNames = DecisionVariableEquationNamesClass()
for dv in DecisionVariables.list:
    DecisionVariableEquationNames.add(dv)
########################################################################
#             Create Accounting Variables' Equation Names              #
########################################################################
AccountingVariableEquationNames = list()
for av in AccountingVariables.list:
    AccVarEqName = av.copy()
    AccVarEqName['type'] = "EquationName"
    AccountingVariableEquationNames.append(AccVarEqName)

EquationNames = DecisionVariableEquationNames.list + AccountingVariableEquationNames
########################################################################
#          Create Matrix from defined Variables Equation Names         #
########################################################################



def get_index(arr, condition):
    for i in range(len(arr)):
        is_matched = True
        for key in condition:
            if arr[i][key] != condition[key]:
                is_matched = False
                break
        if is_matched:
            return i


def filter_indices(arr, condition):
    result_indices = []
    for i in range(len(arr)):
        is_matched = True
        for key in condition:
            if arr[i][key] != condition[key]:
                is_matched = False
                break
        if is_matched:
            result_indices.append(i)
    return result_indices


LHSMatrix = np.zeros((len(EquationNames), len(Variables)))
RHSMatrix = np.zeros((1, len(EquationNames)))

for rowNum in range(len(EquationNames)):
    indices = []
    line = []
    EqName = EquationNames[rowNum]
    ID = EqName['ID']
    if ID == "DecisionVariable":
        # DecisionVariable: {'type':'Variable','ID':'DecisionVariable','section':1,'spcID':'K','periodBorn':-7,'periodDied':1,'regenSpcID':'O','name':'1_-7K1O'}
        if EqName['periodBorn'] < 1:  # 기존에 있던 나무인 경우 (0분기 이하)
            indices = filter_indices(Variables, {
                'ID': 'DecisionVariable',
                'section': EqName['section'],
                'spcID': EqName['spcID'],
                'periodBorn': EqName['periodBorn']
            })
            line = [1 for _ in range(len(indices))]
            area = next(item for item in initialConditions
                        if (item['section'] == EqName['section']) &
                        (item['spcID'] == EqName['spcID']) &
                        (item['periodBorn'] == EqName['periodBorn']))['area']
            RHSMatrix[0, rowNum] = area  # 우변에 각 영역 값을 할당
        else:  # 기존에 있던 나무가 아니고 식재된 경우
            indices = filter_indices(Variables, {
                'ID': ID,
                'section': EqName['section'],
                'regenSpcID': EqName['spcID'],
                'periodDied': EqName['periodBorn']  # 갱신 대상 수종과 갱신 분기를 통해 검색
            })
            line = [1 for _ in range(len(indices))]

            # RHS
            indices_temp = filter_indices(Variables, {
                'ID': EqName['ID'],
                'section': EqName['section'],
                'spcID': EqName['spcID'],
                'periodBorn': EqName['periodBorn']
            })  # 갱신된 현 상태의 수종 정보 (-1값 대입용)
            line2 = [-1 for _ in range(len(indices_temp))]
            indices = indices + indices_temp
            line = line + line2
            RHSMatrix[0, rowNum] = 0  # 우변에 0을 할당 (Equation 이기 때문에)
    if ID == 'Vol_SpcPer':
        # Vol_SpcPer EqName : {'type':'EquationName','ID':'Vol_SpcPer','section':1,'spcID':'C','period':12,'name':'CV.12'}
        indices = filter_indices(Variables, {  # 수종 조건이 맞는 indices 는 우선 전부 다 불러오기.
            'ID': 'DecisionVariable',
            'spcID': EqName['spcID'],
        })
        for i in indices:  # 각각의 indices 에 대해서 Variable 을 불러온 뒤, 조건에 맞게 처리.
            V = Variables[i]
            if (V['periodBorn'] < EqName['period']) & (
                    EqName['period'] <= V['periodDied']):  # 특정 period 에 그 나무가 살아있는 경우
                if V['periodBorn'] <= 0:  # 원래 있던 나무일 때 currentVolumeTables 에서 참고
                    vol = next(item for item in currentVolumeTables
                               if (item['section'] == V['section']) &
                               (item['spcID'] == V['spcID']) &
                               (item['currentAge'] == 1 - V['periodBorn']))['data'][EqName['period']]['volume']
                    line.append(vol)
                else:  # 식재된 나무일 때 면적이 변화) -> futureVolumeTables 에서 참고
                    vol = next(item for item in futureVolumeTables
                               if (item['section'] == V['section']) &
                               (item['spcID'] == V['spcID']))['data'][EqName['period'] - V['periodBorn']]['produced']
                    line.append(vol)
            else:
                line.append(0)

        # RHS
        index = get_index(Variables, {
            'ID': EqName['ID'],
            'name': EqName['name'],
        })
        indices.append(index)
        line.append(-1)
        RHSMatrix[0, rowNum] = 0  # 우변에 0을 할당 (Equation 이기 때문에)
    if ID == 'Area_SpcSecPer':
        # Area_SpcSecPer EqName : {ID: 'Area_SpcSecPer', name: '1OA.1', period: 1, section: 1, spcID: 'O', type: 'Variable'}
        indices = filter_indices(Variables, {  # 수종 조건이 맞는 indices 는 우선 전부 다 불러오기.
            'ID': 'DecisionVariable',
            'spcID': EqName['spcID'],
            'section': EqName['section'],
        })
        for i in indices:  # 각각의 indices 에 대해서 Variable 을 불러온 뒤, 조건에 맞게 처리.
            V = Variables[i]
            if (V['periodBorn'] <= EqName['period']) & (EqName['period'] < V['periodDied']):
                line.append(1)
            else:
                line.append(0)

        # RHS
        index = get_index(Variables, {
            'ID': EqName['ID'],
            'name': EqName['name'],
        })
        indices.append(index)  # 우항에 해당,
        line.append(-1)
        RHSMatrix[0, rowNum] = 0  # 우변에 0을 할당 (Equation 이기 때문에)
    if ID == 'Area_SpcPer':
        # Area_SpcPer EqName : {'type':'EquationName','ID':'Area_SpcPer','period':1,'spcID':'O','name':'OA.1'}
        indices = filter_indices(Variables, {  # 조건이 맞는 indices 는 우선 전부 다 불러오기.
            'ID': 'Area_SpcSecPer',
            'spcID': EqName['spcID'],
            'period': EqName['period']
        })
        line = [1 for _ in range(len(indices))]

        # RHS
        index = get_index(Variables, {
            'ID': EqName['ID'],
            'name': EqName['name'],
        })
        indices.append(index)  # 우항에 해당,
        line.append(-1)
        RHSMatrix[0, rowNum] = 0  # 우변에 0을 할당 (Equation 이기 때문에)
    if ID == 'Area_AgePer':
        # Area_AgePer EqName : {'type':'EquationName','ID':'Area_AgePer','period':1,'age':1,'name':'AC1.1'}
        indices = filter_indices(Variables, {  # 조건이 맞는 indices 는 우선 전부 다 불러오기.
            'ID': 'DecisionVariable',
            'periodBorn': EqName['period'] - EqName['age'],
        # 다영이가 만든 것과 Variation => 0분기때 태어난 애들은 1분기 때 1살(1영급) 이어야 하는 것 아닌가? 다영이 방식은 0때 바로 1분기로 계산된다. 지금 있는 식에 +1 하면 됨.
        })
        del_indices = []  # indices to delete from the above indices array (filtering out dead trees)
        for i in indices:
            V = Variables[i]
            if V['periodDied'] <= EqName['period']:
                del_indices.append(i)
        indices = [i for j, i in enumerate(indices) if j not in del_indices]
        line = [1 for _ in range(len(indices))]

        # RHS
        index = get_index(Variables, {
            'ID': EqName['ID'],
            'name': EqName['name'],
        })
        indices.append(index)  # 우항에 해당,
        line.append(-1)
        RHSMatrix[0, rowNum] = 0  # 우변에 0을 할당 (Equation 이기 때문에)
    if ID == 'Thin_SpcPer':
        # Thin_SpcPer EqName : {'type':'EquationName','ID':'Thin_SpcPer','period':1,'spcID':'O','name':'OT.1'}
        indices = filter_indices(Variables, {  # 수종 조건이 맞는 indices 는 우선 전부 다 불러오기.
            'ID': 'DecisionVariable',
            'spcID': EqName['spcID'],
        })
        for i in indices:  # 각각의 indices 에 대해서 Variable 을 불러온 뒤, 조건에 맞게 처리.
            V = Variables[i]
            if (V['periodBorn'] < EqName['period']) & (
                    EqName['period'] < V['periodDied']):  # periodDied = 주벌시기 이므로, 해당 분기를 제외한 기간 동안 생존한 나무
                if V['periodBorn'] <= 0:  # 원래 있던 나무일 때 currentVolumeTables 에서 참고
                    vol = next(item for item in currentVolumeTables
                               if (item['section'] == V['section']) &
                               (item['spcID'] == V['spcID']) &
                               (item['currentAge'] == 1 - V['periodBorn']))['data'][EqName['period']]['produced']
                    line.append(vol)
                else:  # 식재된 나무일 때 면적이 변화) -> futureVolumeTables 에서 참고
                    vol = next(item for item in futureVolumeTables
                               if (item['section'] == V['section']) &
                               (item['spcID'] == V['spcID']))['data'][EqName['period'] - V['periodBorn']]['produced']
                    line.append(vol)
            else:
                line.append(0)

        # RHS
        index = get_index(Variables, {
            'ID': EqName['ID'],
            'name': EqName['name'],
        })
        indices.append(index)
        line.append(-1)
        RHSMatrix[0, rowNum] = 0  # 우변에 0을 할당 (Equation 이기 때문에)
    if ID == 'Harv_SpcPer':
        # Thin_SpcPer EqName : {'type':'EquationName','ID':'Harv_SpcPer','period':1,'spcID':'O','name':'OH.1'}
        indices = filter_indices(Variables, {  # 수종 조건이 맞는 indices 는 우선 전부 다 불러오기.
            'ID': 'DecisionVariable',
            'spcID': EqName['spcID'],
        })
        for i in indices:  # 각각의 indices 에 대해서 Variable 을 불러온 뒤, 조건에 맞게 처리.
            V = Variables[i]
            if EqName['period'] == V['periodDied']:  # 주벌시기에 해당하는 나무
                if V['periodBorn'] <= 0:  # 원래 있던 나무일 때 currentVolumeTables 에서 참고
                    vol = next(item for item in currentVolumeTables
                               if (item['section'] == V['section']) &
                               (item['spcID'] == V['spcID']) &
                               (item['currentAge'] == 1 - V['periodBorn']))['data'][EqName['period']]['produced']
                    line.append(vol)
                else:  # 식재된 나무일 때 면적이 변화) -> futureVolumeTables 에서 참고
                    vol = next(item for item in futureVolumeTables
                               if (item['section'] == V['section']) &
                               (item['spcID'] == V['spcID']))['data'][EqName['period'] - V['periodBorn']]['produced']
                    line.append(vol)
            else:
                line.append(0)

        # RHS
        index = get_index(Variables, {
            'ID': EqName['ID'],
            'name': EqName['name'],
        })
        indices.append(index)
        line.append(-1)
        RHSMatrix[0, rowNum] = 0  # 우변에 0을 할당 (Equation 이기 때문에)
    if ID == 'PThin_Per':
        # PThin_Per EqName : {'type':'EquationName','ID':'PThin_Per','period':1,'name':'T.1'}
        indices = filter_indices(Variables, {  # 조건이 맞는 indices 는 우선 전부 다 불러오기.
            'ID': 'Thin_SpcPer',
            'period': EqName['period'],
        })
        line = [1 for _ in range(len(indices))]

        # RHS
        index = get_index(Variables, {
            'ID': EqName['ID'],
            'name': EqName['name'],
        })
        indices.append(index)  # 우항에 해당,
        line.append(-1)
        RHSMatrix[0, rowNum] = 0  # 우변에 0을 할당 (Equation 이기 때문에)
    if ID == 'PHarv_Per':
        # PThin_Per EqName : {'type':'EquationName','ID':'PHarv_Per','period':1,'name':'H.1'}
        indices = filter_indices(Variables, {  # 조건이 맞는 indices 는 우선 전부 다 불러오기.
            'ID': 'Harv_SpcPer',
            'period': EqName['period'],
        })
        line = [1 for _ in range(len(indices))]

        # RHS
        index = get_index(Variables, {
            'ID': EqName['ID'],
            'name': EqName['name'],
        })
        indices.append(index)  # 우항에 해당,
        line.append(-1)
        RHSMatrix[0, rowNum] = 0  # 우변에 0을 할당 (Equation 이기 때문에)
    if ID == 'PThinHarv_Per':
        # PThin_Per EqName : {'type':'EquationName','ID':'PHarv_Per','period':1,'name':'H.1'}
        indices.append(get_index(Variables, {  # TH = _T_ + H
            'ID': 'PThin_Per',
            'period': EqName['period'],
        }))
        indices.append(get_index(Variables, {  # TH = T + _H_
            'ID': 'PHarv_Per',
            'period': EqName['period'],
        }))
        line = [1 for _ in range(len(indices))]  # = [1, 1]

        # RHS
        index = get_index(Variables, {
            'ID': EqName['ID'],
            'name': EqName['name'],
        })
        indices.append(index)  # 우항에 해당,
        line.append(-1)
        RHSMatrix[0, rowNum] = 0  # 우변에 0을 할당 (Equation 이기 때문에)
    if ID == 'Carbon_Per':
        # Carbon_Per EqName : {'type':'EquationName','ID':'Carbon_Per','period':1,'name':'C.1'}
        indices = filter_indices(Variables, {  # 수종 조건이 맞는 indices 는 우선 전부 다 불러오기.
            'ID': 'Vol_SpcPer',
            'period': EqName['period'],
        })
        for i in indices:  # 각각의 indices 에 대해서 Variable 을 불러온 뒤, 조건에 맞게 처리.
            V = Variables[i]
            carbonCoeff = volume2Carbon[ID2spc[V['spcID']]]
            line.append(carbonCoeff)

        # RHS
        index = get_index(Variables, {
            'ID': EqName['ID'],
            'name': EqName['name'],
        })
        indices.append(index)
        line.append(-1)
        RHSMatrix[0, rowNum] = 0  # 우변에 0을 할당 (Equation 이기 때문에)
    if ID == 'Water_Per':
        # Water_Per EqName : {'type':'EquationName','ID':'Water_Per','period':1,'name':'W.1'}
        indices = filter_indices(Variables, {  # 수종 조건이 맞는 indices 는 우선 전부 다 불러오기.
            'ID': 'DecisionVariable',
        })
        for i in indices:  # 각각의 indices 에 대해서 Variable 을 불러온 뒤, 조건에 맞게 처리.
            V = Variables[i]
            if (V['periodBorn'] <= EqName['period']) & (EqName['period'] <= V['periodDied']):
                waterCoeff = next(item for item in waterCoeffs
                                  if (item['section'] == V['section']) &
                                  (V['spcID'] in item['spcIDs']))['data'][EqName['period'] - V['periodBorn']]
                if (V['periodBorn'] == EqName['period']) | (EqName['period'] == V['periodDied']):
                    waterCoeff = waterCoeff / 2
                line.append(waterCoeff)
            else:
                line.append(0)

        # RHS
        index = get_index(Variables, {
            'ID': EqName['ID'],
            'name': EqName['name'],
        })
        indices.append(index)
        line.append(-1)
        RHSMatrix[0, rowNum] = 0  # 우변에 0을 할당 (Equation 이기 때문에)
    if ID == 'Labor_Per':
        # Labor_Per EqName : {'type':'EquationName','ID':'Labor_Per','period':1,'name':'J.1'}
        indices = filter_indices(Variables, {  # 수종 조건이 맞는 indices 는 우선 전부 다 불러오기.
            'ID': 'DecisionVariable',
        })
        for i in indices:  # 각각의 indices 에 대해서 Variable 을 불러온 뒤, 조건에 맞게 처리.
            V = Variables[i]
            produced = 0
            if (V['periodBorn'] < EqName['period']) & (
                    EqName['period'] <= V['periodDied']):  # 주벌분기를 포함한 기간 동안 생존한 나무만 선택
                if V['periodBorn'] <= 0:  # 원래 있던 나무일 때 currentVolumeTables 에서 참고
                    produced = next(item for item in currentVolumeTables
                                    if (item['section'] == V['section']) &
                                    (item['spcID'] == V['spcID']) &
                                    (item['currentAge'] == 1 - V['periodBorn']))['data'][EqName['period']]['produced']
                else:  # 식재된 나무일 때 -> futureVolumeTables 에서 참고
                    produced = next(item for item in futureVolumeTables
                                    if (item['section'] == V['section']) &
                                    (item['spcID'] == V['spcID']))['data'][EqName['period'] - V['periodBorn']][
                        'produced']
            if produced != 0:
                if EqName['period'] == V['periodDied']:
                    line.append(laborCoeffs['clearCut'] + laborCoeffs['regeneration'][
                        V['regenSpcID']])  # clearCut + regen labor. 만약 regeneration = '.' 인 경우 0
                else:
                    line.append(laborCoeffs['thinning'])
            else:
                line.append(0)

        # RHS
        index = get_index(Variables, {
            'ID': EqName['ID'],
            'name': EqName['name'],
        })
        indices.append(index)
        line.append(-1)
        RHSMatrix[0, rowNum] = 0  # 우변에 0을 할당 (Equation 이기 때문에)
    if ID == 'TCost_Per':
        # TCost_Per EqName : {'type':'EquationName','ID':'TCost_Per','period':1,'name':'TC.1'}
        indices = filter_indices(Variables, {  # 수종 조건이 맞는 indices 는 우선 전부 다 불러오기.
            'ID': 'DecisionVariable',
        })
        for i in indices:  # 각각의 indices 에 대해서 Variable 을 불러온 뒤, 조건에 맞게 처리.
            V = Variables[i]
            produced = 0
            if (V['periodBorn'] < EqName['period']) & (
                    EqName['period'] < V['periodDied']):  # 주벌분기를 포함한 기간 동안 생존한 나무만 선택
                if V['periodBorn'] <= 0:  # 원래 있던 나무일 때 currentVolumeTables 에서 참고
                    produced = next(item for item in currentVolumeTables
                                    if (item['section'] == V['section']) &
                                    (item['spcID'] == V['spcID']) &
                                    (item['currentAge'] == 1 - V['periodBorn']))['data'][EqName['period']]['produced']
                else:  # 식재된 나무일 때 -> futureVolumeTables 에서 참고
                    produced = next(item for item in futureVolumeTables
                                    if (item['section'] == V['section']) &
                                    (item['spcID'] == V['spcID']))['data'][EqName['period'] - V['periodBorn']][
                        'produced']
            if produced != 0:
                line.append(costCoeffs['thinning'])
            else:
                line.append(0)

        # RHS
        index = get_index(Variables, {
            'ID': EqName['ID'],
            'name': EqName['name'],
        })
        indices.append(index)
        line.append(-1)
        RHSMatrix[0, rowNum] = 0  # 우변에 0을 할당 (Equation 이기 때문에)
    if ID == 'TRev_Per':
        # TRev_Per EqName : {'type':'EquationName','ID':'TRev_Per','period':1,'name':'TR.1'}
        indices = filter_indices(Variables, {  # 수종별 간벌량 변수 불러오기
            'ID': 'Thin_SpcPer',
            'period': EqName['period']
        })
        for i in indices:  # 각각의 indices 에 대해서 Variable 을 불러온 뒤, 조건에 맞게 처리.
            V = Variables[i]
            thinningPrice = volume2Price['thinning'][V['spcID']]
            line.append(thinningPrice)

        # RHS
        index = get_index(Variables, {
            'ID': EqName['ID'],
            'name': EqName['name'],
        })
        indices.append(index)
        line.append(-1)
        RHSMatrix[0, rowNum] = 0  # 우변에 0을 할당 (Equation 이기 때문에)
    if ID == 'TNet_Per':
        # TNet_Per EqName : {'type':'EquationName','ID':'TNet_Per','period':1,'name':'ft.1'}
        indices.append(get_index(Variables, {  # ft = *-TC* + TR
            'ID': 'TCost_Per',
            'period': EqName['period'],
        }))
        line.append(-1)
        indices.append(get_index(Variables, {  # ft = -TC + *TR*
            'ID': 'TRev_Per',
            'period': EqName['period'],
        }))
        line.append(1)  # [-1, 1]

        # RHS
        index = get_index(Variables, {
            'ID': EqName['ID'],
            'name': EqName['name'],
        })
        indices.append(index)
        line.append(-1)
        RHSMatrix[0, rowNum] = 0  # 우변에 0을 할당 (Equation 이기 때문에)
    if ID == 'HCost_Per':
        # HCost_Per EqName : {'type':'EquationName','ID':'HCost_Per','period':1,'name':'HC.1'}
        indices = filter_indices(Variables, {  # 수종 조건이 맞는 indices 는 우선 전부 다 불러오기.
            'ID': 'DecisionVariable',
            'periodDied': EqName['period'],
        })
        for i in indices:  # 각각의 indices 에 대해서 Variable 을 불러온 뒤, 조건에 맞게 처리.
            V = Variables[i]
            line.append(costCoeffs['clearCut'] + costCoeffs['regeneration'][V['regenSpcID']])

        # RHS
        index = get_index(Variables, {
            'ID': EqName['ID'],
            'name': EqName['name'],
        })
        indices.append(index)
        line.append(-1)
        RHSMatrix[0, rowNum] = 0  # 우변에 0을 할당 (Equation 이기 때문에)
    if ID == 'HRev_Per':
        # HRev_Per EqName : {'type':'EquationName','ID':'HRev_Per','period':1,'name':'HR.1'}
        indices = filter_indices(Variables, {  # 수종별 주벌량 변수 불러오기
            'ID': 'Harv_SpcPer',
            'period': EqName['period']
        })
        for i in indices:  # 각각의 indices 에 대해서 Variable 을 불러온 뒤, 조건에 맞게 처리.
            V = Variables[i]
            clearCutPrice = volume2Price['clearCut'][V['spcID']]
            line.append(clearCutPrice)

        # RHS
        index = get_index(Variables, {
            'ID': EqName['ID'],
            'name': EqName['name'],
        })
        indices.append(index)
        line.append(-1)
        RHSMatrix[0, rowNum] = 0  # 우변에 0을 할당 (Equation 이기 때문에)
    if ID == 'HNet_Per':
        # HNet_Per EqName : {'type':'EquationName','ID':'HNet_Per','period':1,'name':'fh.1'}
        indices.append(get_index(Variables, {  # fh = *-HC* + HR
            'ID': 'HCost_Per',
            'period': EqName['period'],
        }))
        line.append(-1)
        indices.append(get_index(Variables, {  # fh = *-HC* + *HR*
            'ID': 'HRev_Per',
            'period': EqName['period'],
        }))
        line.append(1)  # [-1, 1]

        # RHS
        index = get_index(Variables, {
            'ID': EqName['ID'],
            'name': EqName['name'],
        })
        indices.append(index)
        line.append(-1)
        RHSMatrix[0, rowNum] = 0  # 우변에 0을 할당 (Equation 이기 때문에)
    if ID == 'f_Per':
        # f_Per EqName : {'type':'EquationName','ID':'f_Per','period':1,'name':'f.1'}
        indices.append(get_index(Variables, {  # f = *ft* + fh
            'ID': 'TNet_Per',
            'period': EqName['period'],
        }))
        indices.append(get_index(Variables, {  # f = ft + *fh*
            'ID': 'HNet_Per',
            'period': EqName['period'],
        }))
        line = [1 for _ in range(len(indices))]  # = [1, 1]

        # RHS
        index = get_index(Variables, {
            'ID': EqName['ID'],
            'name': EqName['name'],
        })
        indices.append(index)  # 우항에 해당,
        line.append(-1)
        RHSMatrix[0, rowNum] = 0  # 우변에 0을 할당 (Equation 이기 때문에)
    if ID == 'g_Per':
        # g_Per EqName : {'type':'EquationName','ID':'g_Per','period':1,'name':'g.1'}
        indices.append(get_index(Variables, {  # g = *C* x 처리비용 x 환율
            'ID': 'Carbon_Per',
            'period': EqName['period'],
        }))
        line.append(CO2ProcessingCost * exchangeRate)

        # RHS
        index = get_index(Variables, {
            'ID': EqName['ID'],
            'name': EqName['name'],
        })
        indices.append(index)  # 우항에 해당,
        line.append(-1)
        RHSMatrix[0, rowNum] = 0  # 우변에 0을 할당 (Equation 이기 때문에)
    if ID == 'h_Per':
        # h_Per EqName : {'type':'EquationName','ID':'h_Per','period':1,'name':'h.1'}
        indices.append(get_index(Variables, {  # h.per = WaterCoeff * Water.per
            'ID': 'Water_Per',
            'period': EqName['period'],
        }))
        line.append(waterSavingCoeff)

        index = get_index(Variables, {
            'ID': EqName['ID'],
            'name': EqName['name'],
        })
        indices.append(index)  # 우항에 해당,
        line.append(-1)
        RHSMatrix[0, rowNum] = 0  # 우변에 0을 할당 (Equation 이기 때문에)
    if ID == 'NPV_f_Per':
        # NPV_f_Per EqName : {'type':'EquationName','ID':'NPV_f_Per','period':1,'name':'NPV_f.1'}
        indices.append(get_index(Variables, {  # NPV_f = *f* x 1/(1+r)^t
            'ID': 'f_Per',
            'period': EqName['period'],
        }))
        line.append(NPV(interestRate, EqName['period']))

        # RHS
        index = get_index(Variables, {
            'ID': EqName['ID'],
            'name': EqName['name'],
        })
        indices.append(index)  # 우항에 해당,
        line.append(-1)
        RHSMatrix[0, rowNum] = 0  # 우변에 0을 할당 (Equation 이기 때문에)
    if ID == 'NPV_g_Per':
        # NPV_g_Per EqName : {'type':'EquationName','ID':'NPV_g_Per','period':1,'name':'NPV_g.1'}
        indices.append(get_index(Variables, {  # NPV_f = *f* x 1/(1+r)^t
            'ID': 'g_Per',
            'period': EqName['period'],
        }))
        line.append(NPV(interestRate, EqName['period']))

        # RHS
        index = get_index(Variables, {
            'ID': EqName['ID'],
            'name': EqName['name'],
        })
        indices.append(index)  # 우항에 해당,
        line.append(-1)
        RHSMatrix[0, rowNum] = 0  # 우변에 0을 할당 (Equation 이기 때문에)
    if ID == 'NPV_h_Per':
        # NPV_h_Per EqName : {'type':'EquationName','ID':'NPV_h_Per','period':1,'name':'NPV_h.1'}
        indices.append(get_index(Variables, {  # NPV_f = *f* x 1/(1+r)^t
            'ID': 'h_Per',
            'period': EqName['period'],
        }))
        line.append(NPV(interestRate, EqName['period']))

        # RHS
        index = get_index(Variables, {
            'ID': EqName['ID'],
            'name': EqName['name'],
        })
        indices.append(index)  # 우항에 해당,
        line.append(-1)
        RHSMatrix[0, rowNum] = 0  # 우변에 0을 할당 (Equation 이기 때문에)
    if ID == 'NPV_f':
        # NPV_f EqName : {'type':'EquationName','ID':'NPV_f','name':'NPV_f'}
        indices = filter_indices(Variables, {  # NPV_f = ∑ NPV_f_Per
            'ID': 'NPV_f_Per',
        })
        line = [1 for _ in range(len(indices))]

        # RHS
        index = get_index(Variables, {
            'ID': EqName['ID'],
            'name': EqName['name'],
        })
        indices.append(index)  # 우항에 해당,
        line.append(-1)
        RHSMatrix[0, rowNum] = 0  # 우변에 0을 할당 (Equation 이기 때문에)
    if ID == 'NPV_g':
        # NPV_g EqName : {'type':'EquationName','ID':'NPV_g','name':'NPV_g'}
        indices = filter_indices(Variables, {  # NPV_g = ∑ NPV_g_Per
            'ID': 'NPV_g_Per',
        })
        line = [1 for _ in range(len(indices))]

        # RHS
        index = get_index(Variables, {
            'ID': EqName['ID'],
            'name': EqName['name'],
        })
        indices.append(index)  # 우항에 해당,
        line.append(-1)
        RHSMatrix[0, rowNum] = 0  # 우변에 0을 할당 (Equation 이기 때문에)
    if ID == 'NPV_h':
        # NPV_h EqName : {'type':'EquationName','ID':'NPV_h','name':'NPV_h'}
        indices = filter_indices(Variables, {  # NPV_h = ∑ NPV_h_Per
            'ID': 'NPV_h_Per',
        })
        line = [1 for _ in range(len(indices))]

        # RHS
        index = get_index(Variables, {
            'ID': EqName['ID'],
            'name': EqName['name'],
        })
        indices.append(index)  # 우항에 해당,
        line.append(-1)
        RHSMatrix[0, rowNum] = 0  # 우변에 0을 할당 (Equation 이기 때문에)

    if indices:  # if not empty
        # replace specific rowNum and col indices to new values
        LHSMatrix[rowNum, np.array(indices)] = line

VariableNameList = [x['name'] for x in Variables]
equation_comparisons = ['=' for _ in range(len(VariableNameList))]
Z = [0 for _ in range(len(VariableNameList) - 3)] + [w1, w2, w3]


print(len(Variables))